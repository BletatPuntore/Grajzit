Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.login = login;
exports.signUp = signUp;
exports.resetPassword = resetPassword;
exports.updateProfile = updateProfile;
exports.logout = logout;

var _reactNative = require('react-native');

var _constants = require('@constants/');

var _actions = require('../recipes/actions');

var RecipeActions = _interopRequireWildcard(_actions);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var regeneratorRuntime = require('regenerator-runtime');

function getCredentialsFromStorage() {
  var values, jsonValues;
  return regeneratorRuntime.async(function getCredentialsFromStorage$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return regeneratorRuntime.awrap(_reactNative.AsyncStorage.getItem('api/credentials'));

        case 2:
          values = _context.sent;
          jsonValues = JSON.parse(values);

          if (!(jsonValues.email || jsonValues.password)) {
            _context.next = 6;
            break;
          }

          return _context.abrupt('return', jsonValues);

        case 6:
          return _context.abrupt('return', {});

        case 7:
        case 'end':
          return _context.stop();
      }
    }
  }, null, this);
}

function saveCredentialsToStorage() {
  var email = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var password = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return regeneratorRuntime.async(function saveCredentialsToStorage$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return regeneratorRuntime.awrap(_reactNative.AsyncStorage.setItem('api/credentials', JSON.stringify({ email: email, password: password })));

        case 2:
        case 'end':
          return _context2.stop();
      }
    }
  }, null, this);
}

function removeCredentialsFromStorage() {
  return regeneratorRuntime.async(function removeCredentialsFromStorage$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return regeneratorRuntime.awrap(_reactNative.AsyncStorage.removeItem('api/credentials'));

        case 2:
        case 'end':
          return _context3.stop();
      }
    }
  }, null, this);
}

function getUserData(dispatch) {
  if (_constants.Firebase === null) {
    return function () {
      return new Promise(function (resolve, reject) {
        return reject({ message: _constants.ErrorMessages.invalidFirebase });
      });
    };
  }

  var UID = _constants.Firebase.auth().currentUser.uid;
  if (!UID) return false;

  var ref = _constants.FirebaseRef.child('users/' + UID);

  return ref.on('value', function (snapshot) {
    var userData = snapshot.val() || [];

    return dispatch({
      type: 'USER_DETAILS_UPDATE',
      data: userData
    });
  });
}

function login() {
  var _this = this;

  var formData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var verifyEmail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (_constants.Firebase === null) {
    return function () {
      return new Promise(function (resolve, reject) {
        return reject({ message: _constants.ErrorMessages.invalidFirebase });
      });
    };
  }

  var email = formData.Email || '';
  var password = formData.Password || '';

  return function _callee(dispatch) {
    var credsFromStorage;
    return regeneratorRuntime.async(function _callee$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (!(!email || !password)) {
              _context4.next = 6;
              break;
            }

            _context4.next = 3;
            return regeneratorRuntime.awrap(getCredentialsFromStorage());

          case 3:
            credsFromStorage = _context4.sent;

            if (!email) email = credsFromStorage.email;
            if (!password) password = credsFromStorage.password;

          case 6:
            if (email && password) saveCredentialsToStorage(email, password);

            return _context4.abrupt('return', _constants.Firebase.auth().signInWithEmailAndPassword(email, password).then(function (res) {
              if (res && res.uid) {
                _constants.FirebaseRef.child('users/' + res.uid).update({
                  lastLoggedIn: _constants.Firebase.database.ServerValue.TIMESTAMP
                });

                if (verifyEmail) {
                  _constants.Firebase.auth().currentUser.sendEmailVerification().catch(function () {
                    return console.log('Verification email failed to send');
                  });
                }

                RecipeActions.getFavourites(dispatch);

                getUserData(dispatch);
              }

              return dispatch({
                type: 'USER_LOGIN',
                data: res
              });
            }).catch(function (err) {
              throw err;
            }));

          case 8:
          case 'end':
            return _context4.stop();
        }
      }
    }, null, _this);
  };
}

function signUp() {
  var formData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (_constants.Firebase === null) {
    return function () {
      return new Promise(function (resolve, reject) {
        return reject({ message: _constants.ErrorMessages.invalidFirebase });
      });
    };
  }

  var email = formData.Email || '';
  var password = formData.Password || '';
  var firstName = formData.FirstName || '';
  var lastName = formData.LastName || '';

  return function () {
    return _constants.Firebase.auth().createUserWithEmailAndPassword(email, password).then(function (res) {
      if (res && res.uid) {
        _constants.FirebaseRef.child('users/' + res.uid).set({
          firstName: firstName,
          lastName: lastName,
          signedUp: _constants.Firebase.database.ServerValue.TIMESTAMP,
          lastLoggedIn: _constants.Firebase.database.ServerValue.TIMESTAMP
        });
      }
    });
  };
}

function resetPassword() {
  var formData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (_constants.Firebase === null) {
    return function () {
      return new Promise(function (resolve, reject) {
        return reject({ message: _constants.ErrorMessages.invalidFirebase });
      });
    };
  }

  var email = formData.Email || '';
  return function () {
    return _constants.Firebase.auth().sendPasswordResetEmail(email);
  };
}

function updateProfile() {
  var formData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (_constants.Firebase === null) {
    return function () {
      return new Promise(function (resolve, reject) {
        return reject({ message: _constants.ErrorMessages.invalidFirebase });
      });
    };
  }

  var UID = _constants.Firebase.auth().currentUser.uid;
  if (!UID) return false;

  var email = formData.Email || '';
  var firstName = formData.FirstName || '';
  var lastName = formData.LastName || '';

  return function () {
    return _constants.Firebase.auth().currentUser.updateEmail(email).then(function () {
      _constants.FirebaseRef.child('users/' + UID).update({
        firstName: firstName, lastName: lastName
      });
    });
  };
}

function logout() {
  if (_constants.Firebase === null) {
    return function () {
      return new Promise(function (resolve, reject) {
        return reject({ message: _constants.ErrorMessages.invalidFirebase });
      });
    };
  }

  return function (dispatch) {
    return _constants.Firebase.auth().signOut().then(function () {
      removeCredentialsFromStorage();
      RecipeActions.resetFavourites(dispatch);
      dispatch({ type: 'USER_LOGOUT' });
    });
  };
}